{"mappings":"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","sources":["<anon>","src/index.js","src/js/movieQuery.js","src/js/movieFetch.js","src/js/returnToTop.js"],"sourcesContent":["(function () {\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirebc11\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirebc11\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRequire(\"8dLlr\");\nparcelRequire(\"kvC6y\");\nparcelRequire(\"18yUV\");\nparcelRequire(\"jcFG7\");\n\nvar $dIxxU = parcelRequire(\"dIxxU\");\nconst $acffae5132b60cfc$var$URL_KEY = \"a51a9bb0cd5bc1ed985d30c82a20bd57\";\nclass $acffae5132b60cfc$export$2e2bcd8739ae039 {\n    constructor(){\n        this.inputValue = \"\";\n        this.page = 1;\n        this.genres = \"\";\n    }\n    async fetchMovie() {\n        try {\n            const URL = \"https://api.themoviedb.org/3/search/movie\";\n            const response = await (0, $dIxxU.default).get(URL, {\n                params: {\n                    api_key: $acffae5132b60cfc$var$URL_KEY,\n                    query: this.inputValue,\n                    page: this.page\n                }\n            });\n            this.incrementPage();\n            return response.data;\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n    async getGenre() {\n        try {\n            const URL = \"https://api.themoviedb.org/3/genre/movie/list?&language=en-US`\";\n            const response = await (0, $dIxxU.default).get(URL, {\n                params: {\n                    api_key: $acffae5132b60cfc$var$URL_KEY\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n    incrementPage() {\n        this.page += 1;\n    }\n    resetPage() {\n        this.page = 1;\n    }\n    get value() {\n        return this.inputValue;\n    }\n    set value(newValue) {\n        this.inputValue = newValue;\n    }\n}\n\n\n\nvar $8dLlr = parcelRequire(\"8dLlr\");\n\nvar $jcFG7 = parcelRequire(\"jcFG7\");\nconst $7aa62b755d602de8$var$mybutton = document.querySelector(\".back-to-top\");\n$7aa62b755d602de8$var$mybutton.addEventListener(\"click\", $7aa62b755d602de8$export$fe377cc3ceec5d02);\nwindow.onscroll = function() {\n    $7aa62b755d602de8$var$scrollFunction();\n};\nfunction $7aa62b755d602de8$var$scrollFunction() {\n    if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) $7aa62b755d602de8$var$mybutton.style.display = \"block\";\n    else $7aa62b755d602de8$var$mybutton.style.display = \"none\";\n}\nfunction $7aa62b755d602de8$export$fe377cc3ceec5d02() {\n    document.body.scrollIntoView({\n        behavior: \"smooth\"\n    });\n}\n\n\n\nvar $5Beei = parcelRequire(\"5Beei\");\nconst $63b20ef733fa8c53$var$refs = {\n    searchForm: document.querySelector(\".header-search-form\"),\n    gallery: document.querySelector(\".gallery\"),\n    searchMessage: document.querySelector(\".header-message\"),\n    page: document.querySelector('a[data-page=\"home\"]'),\n    paginationCont: document.getElementById(\"tui-pagination-container\")\n};\nlet $63b20ef733fa8c53$var$SEARCH_ACTIVE = false;\nlet $63b20ef733fa8c53$var$total_films;\nlet $63b20ef733fa8c53$var$prevSearch = \"\";\nconst $63b20ef733fa8c53$var$keyMovieFetch = new KeyMovieFetch();\n$63b20ef733fa8c53$var$refs.searchForm.addEventListener(\"submit\", $63b20ef733fa8c53$var$onSearchSubmit);\nasync function $63b20ef733fa8c53$var$onSearchSubmit(evt) {\n    try {\n        evt.preventDefault();\n        evt.stopPropagation();\n        $63b20ef733fa8c53$var$refs.paginationCont.classList.remove(\"is-hidden\");\n        $63b20ef733fa8c53$var$keyMovieFetch.resetPage();\n        $63b20ef733fa8c53$var$keyMovieFetch.value = evt.currentTarget.elements.searchQuery.value;\n        if ($63b20ef733fa8c53$var$keyMovieFetch.value === \"\") {\n            $63b20ef733fa8c53$var$refs.searchMessage.classList.remove(\"is-hidden\");\n            $63b20ef733fa8c53$var$SEARCH_ACTIVE = false;\n            (0, $8dLlr.requireData).page = 1;\n            (0, $8dLlr.loadPage)();\n            $63b20ef733fa8c53$var$refs.searchMessage.innerHTML = \"I can`t find an empty request. Please input something.\";\n            return;\n        }\n        if ($63b20ef733fa8c53$var$keyMovieFetch.value !== \"\") {\n            const fetch = await $63b20ef733fa8c53$var$keyMovieFetch.fetchMovie($63b20ef733fa8c53$var$keyMovieFetch.value);\n            $63b20ef733fa8c53$var$total_films = fetch.total_results;\n            if (fetch.total_results) {\n                $63b20ef733fa8c53$var$prevSearch = $63b20ef733fa8c53$var$keyMovieFetch.value;\n                $63b20ef733fa8c53$var$keyMovieFetch.value;\n                $63b20ef733fa8c53$var$refs.gallery.innerHTML = \"\";\n                (0, $jcFG7.pagination).reset(fetch.total_results);\n                const { results: results } = fetch;\n                const CheckImgUrl = (0, $5Beei.filmCheckImgUrl)(results);\n                await $63b20ef733fa8c53$var$createMarkupKey({\n                    ...fetch,\n                    ...CheckImgUrl\n                });\n                $63b20ef733fa8c53$var$SEARCH_ACTIVE = true;\n            }\n        }\n        if ($63b20ef733fa8c53$var$total_films === 0) {\n            $63b20ef733fa8c53$var$keyMovieFetch.value = $63b20ef733fa8c53$var$prevSearch;\n            $63b20ef733fa8c53$var$refs.searchMessage.classList.remove(\"is-hidden\");\n            $63b20ef733fa8c53$var$refs.searchMessage.innerHTML = \"Search result not successful. Enter the correct movie name and try again.\";\n            return;\n        }\n        evt.target.reset();\n    } catch (error) {\n        console.log(error);\n    }\n}\nasync function $63b20ef733fa8c53$var$renderGalleryKey() {\n    if ($63b20ef733fa8c53$var$keyMovieFetch.value !== \"\") {\n        const fetch = await $63b20ef733fa8c53$var$keyMovieFetch.fetchMovie($63b20ef733fa8c53$var$keyMovieFetch.value);\n        const { results: results } = fetch;\n        const CheckImgUrl = (0, $5Beei.filmCheckImgUrl)(results);\n        await $63b20ef733fa8c53$var$createMarkupKey({\n            ...fetch,\n            ...CheckImgUrl\n        });\n    } else return;\n}\nfunction $63b20ef733fa8c53$var$matchGenres(genreIdArr, genresFool) {\n    let result = [];\n    genreIdArr.forEach((genreId)=>{\n        const matchGenre = genresFool.find((genre)=>genreId === genre.id);\n        if (matchGenre) result.push(matchGenre.name);\n    });\n    return result;\n}\nasync function $63b20ef733fa8c53$var$createMarkupKey(data) {\n    $63b20ef733fa8c53$var$refs.gallery.innerHTML = \"\";\n    $63b20ef733fa8c53$var$refs.searchMessage.classList.add(\"is-hidden\");\n    const markup = data.results.map(({ id: id, poster_path: poster_path, title: title, release_date: release_date, genre_ids: genre_ids })=>{\n        let year;\n        if (release_date !== undefined) {\n            if (release_date.length > 4) year = release_date.slice(0, 4);\n            else year = \"There is no info\";\n        } else year = \"There is no info\";\n        const genr = $63b20ef733fa8c53$var$matchGenres(genre_ids, (0, $8dLlr.GENRES_FULL_INFO));\n        let formatedGenres;\n        if (!genr.length) formatedGenres = [\n            \"There is no info\"\n        ];\n        else if (genr.length > 2) {\n            const genresList = genr.slice(0, 2);\n            genresList.push(\"Other\");\n            formatedGenres = genresList.join(\", \");\n        } else formatedGenres = genr.join(\", \");\n        return `\n      <li class=\"card-set__item\" id=\"${id}\">\n      <a href='#' id='${id}' class=\"card-link\">\n      <picture>\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w780/${poster_path} 1x,\n                   http://image.tmdb.org/t/p/original/${poster_path} 2x\" media=\"(min-width: 1280px)\" type=\"image/jpeg\" />\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w342/${poster_path} 1x,\n                    http://image.tmdb.org/t/p/w500/${poster_path} 2x\" media=\"(min-width: 768px)\" type=\"image/jpeg\" />\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w185/${poster_path} 1x,\n                    http://image.tmdb.org/t/p/w342/${poster_path} 2x\" media=\"(max-width: 480px)\" type=\"image/jpeg\" />\n         <img id=\"${id}\n          loading=\"lazy\"\n          src=\"http://image.tmdb.org/t/p/w342/${poster_path}\"\n          alt=\"${title}\"\n          class=\"card-set__img \"/>\n      </picture>\n     \n      <h3 class=\"card-set__title\">${title}</h3>\n      <div class=\"card-set__description\" id=\"${id}\">\n      <span class=\"card-set__genre\" id=\"${id}\"> ${formatedGenres} &nbsp| ${year}</span>\n        </div>\n      </a>\n      </li>\n      `;\n    }).join(\"\");\n    (0, $8dLlr.addToHTML)(markup);\n}\n(0, $jcFG7.pagination).on(\"afterMove\", (event)=>{\n    const currentPage = event.page;\n    if ($63b20ef733fa8c53$var$SEARCH_ACTIVE) {\n        const currentPage = event.page;\n        $63b20ef733fa8c53$var$keyMovieFetch.page = currentPage;\n        $63b20ef733fa8c53$var$renderGalleryKey();\n        (0, $7aa62b755d602de8$export$fe377cc3ceec5d02)();\n    } else {\n        (0, $8dLlr.onPaginLoadMore)(currentPage);\n        (0, $7aa62b755d602de8$export$fe377cc3ceec5d02)();\n    }\n});\n\n\n\nparcelRequire(\"8vUUN\");\n\n})();\n//# sourceMappingURL=index.f7c495e9.js.map\n","import './js/popular-gallery.js';\nimport { loader } from './js/loader';\n\nimport { fetch } from './js/fetch-api.js';\nimport { pagination } from './js/pagination.js';\nimport { movieQuery } from './js/movieQuery.js';\nimport './js/returnToTop.js';\nimport './js/btn-modal.js';\n\n","import movieFetch from './movieFetch';\nimport { addToHTML, loadPage } from './popular-gallery';\nimport {\n  GENRES_FULL_INFO,\n  onPaginLoadMore,\n  requireData,\n} from './popular-gallery';\nimport { pagination } from './pagination';\nimport { topFunction } from './returnToTop';\nimport { filmCheckImgUrl } from './popular-gallery-function';\n\nconst refs = {\n  searchForm: document.querySelector('.header-search-form'),\n  gallery: document.querySelector('.gallery'),\n  searchMessage: document.querySelector('.header-message'),\n  page: document.querySelector('a[data-page=\"home\"]'),\n  paginationCont: document.getElementById('tui-pagination-container'),\n  \n};\nlet SEARCH_ACTIVE = false;\nlet total_films;\nlet prevSearch = '';\nconst keyMovieFetch = new KeyMovieFetch();\n\nrefs.searchForm.addEventListener('submit', onSearchSubmit);\n\n\nasync function onSearchSubmit(evt) {\n  try {\n    evt.preventDefault();\n    evt.stopPropagation();\n    refs.paginationCont.classList.remove('is-hidden');\n    \n    keyMovieFetch.resetPage();\n   \n    keyMovieFetch.value = evt.currentTarget.elements.searchQuery.value;\n    if (keyMovieFetch.value === '') {\n     \n      refs.searchMessage.classList.remove('is-hidden');\n     \n      SEARCH_ACTIVE = false;\n      requireData.page = 1;\n      loadPage();\n      refs.searchMessage.innerHTML =\n        'I can`t find an empty request. Please input something.';\n    \n      return;\n    }\n    if (keyMovieFetch.value !== '') {\n      const fetch = await keyMovieFetch.fetchMovie(keyMovieFetch.value);\n   \n      total_films = fetch.total_results;\n    \n      if (fetch.total_results) {\n        prevSearch = keyMovieFetch.value;\n        keyMovieFetch.value;\n        refs.gallery.innerHTML = '';\n        pagination.reset(fetch.total_results);\n        const { results } = fetch;\n\n        const CheckImgUrl = filmCheckImgUrl(results);\n       \n        await createMarkupKey({ ...fetch, ...CheckImgUrl });\n        SEARCH_ACTIVE = true;\n        \n      }\n\n      \n    }\n    if (total_films === 0) {\n      keyMovieFetch.value = prevSearch;\n      refs.searchMessage.classList.remove('is-hidden');\n     \n      refs.searchMessage.innerHTML =\n        'Search result not successful. Enter the correct movie name and try again.';\n     \n      return;\n    }\n    \n    evt.target.reset();\n  } catch (error) {\n   \n    console.log(error);\n  }\n}\n\n\nasync function renderGalleryKey() {\n  \n  if (keyMovieFetch.value !== '') {\n    const fetch = await keyMovieFetch.fetchMovie(keyMovieFetch.value);\n   \n    const { results } = fetch;\n\n    const CheckImgUrl = filmCheckImgUrl(results);\n   \n    await createMarkupKey({ ...fetch, ...CheckImgUrl });\n   \n  } else return;\n}\n\nfunction matchGenres(genreIdArr, genresFool) {\n  let result = [];\n\n  genreIdArr.forEach(genreId => {\n    const matchGenre = genresFool.find(genre => genreId === genre.id);\n\n    if (matchGenre) {\n      result.push(matchGenre.name);\n    }\n  });\n  return result;\n}\n\nasync function createMarkupKey(data) {\n  refs.gallery.innerHTML = '';\n  refs.searchMessage.classList.add('is-hidden');\n\n \n\n  const markup = data.results\n    .map(({ id, poster_path, title, release_date, genre_ids }) => {\n      let year;\n\n      if (release_date !== undefined) {\n        if (release_date.length > 4) {\n          year = release_date.slice(0, 4);\n        } else {\n          year = 'There is no info';\n        }\n      } else {\n        year = 'There is no info';\n      }\n\n      const genr = matchGenres(genre_ids, GENRES_FULL_INFO);\n\n      let formatedGenres;\n      if (!genr.length) {\n        formatedGenres = ['There is no info'];\n      } else if (genr.length > 2) {\n        const genresList = genr.slice(0, 2);\n        genresList.push('Other');\n\n        formatedGenres = genresList.join(', ');\n      } else {\n        formatedGenres = genr.join(', ');\n      }\n\n      return `\n      <li class=\"card-set__item\" id=\"${id}\">\n      <a href='#' id='${id}' class=\"card-link\">\n      <picture>\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w780/${poster_path} 1x,\n                   http://image.tmdb.org/t/p/original/${poster_path} 2x\" media=\"(min-width: 1280px)\" type=\"image/jpeg\" />\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w342/${poster_path} 1x,\n                    http://image.tmdb.org/t/p/w500/${poster_path} 2x\" media=\"(min-width: 768px)\" type=\"image/jpeg\" />\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w185/${poster_path} 1x,\n                    http://image.tmdb.org/t/p/w342/${poster_path} 2x\" media=\"(max-width: 480px)\" type=\"image/jpeg\" />\n         <img id=\"${id}\n          loading=\"lazy\"\n          src=\"http://image.tmdb.org/t/p/w342/${poster_path}\"\n          alt=\"${title}\"\n          class=\"card-set__img \"/>\n      </picture>\n     \n      <h3 class=\"card-set__title\">${title}</h3>\n      <div class=\"card-set__description\" id=\"${id}\">\n      <span class=\"card-set__genre\" id=\"${id}\"> ${formatedGenres} &nbsp| ${year}</span>\n        </div>\n      </a>\n      </li>\n      `;\n    })\n    .join('');\n  addToHTML(markup);\n}\n\npagination.on('afterMove', event => {\n  const currentPage = event.page;\n  if (SEARCH_ACTIVE) {\n    const currentPage = event.page;\n   \n    keyMovieFetch.page = currentPage;\n    renderGalleryKey();\n    topFunction();\n  } else {\n    onPaginLoadMore(currentPage);\n    topFunction();\n  }\n});\n","import axios from 'axios';\n\nconst URL_KEY = 'a51a9bb0cd5bc1ed985d30c82a20bd57';\n\nexport default class KeyMovieFetch {\n  constructor() {\n    this.inputValue = '';\n    this.page = 1;\n    this.genres = '';\n  }\n\n  async fetchMovie() {\n    try {\n      const URL = 'https://api.themoviedb.org/3/search/movie';\n\n      const response = await axios.get(URL, {\n        params: {\n          api_key: URL_KEY,\n          query: this.inputValue,\n          page: this.page,\n        },\n      });\n      this.incrementPage();\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n  async getGenre() {\n    try {\n      const URL =\n        'https://api.themoviedb.org/3/genre/movie/list?&language=en-US`';\n      const response = await axios.get(URL, {\n        params: {\n          api_key: URL_KEY,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get value() {\n    return this.inputValue;\n  }\n  set value(newValue) {\n    this.inputValue = newValue;\n  }\n}\n","const mybutton = document.querySelector('.back-to-top');\nmybutton.addEventListener('click', topFunction);\n\nwindow.onscroll = function () {\n  scrollFunction();\n};\n\nfunction scrollFunction() {\n  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {\n    mybutton.style.display = 'block';\n  } else {\n    mybutton.style.display = 'none';\n  }\n}\n\nexport function topFunction() {\n  \n\n  document.body.scrollIntoView({\n    behavior: 'smooth',\n  });\n}\n"],"names":["$63b20ef733fa8c53$var$total_films","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$8dLlr","$jcFG7","$7aa62b755d602de8$var$mybutton","document","querySelector","$7aa62b755d602de8$export$fe377cc3ceec5d02","body","scrollIntoView","behavior","addEventListener","onscroll","scrollTop","documentElement","style","display","$5Beei","$63b20ef733fa8c53$var$refs","searchForm","gallery","searchMessage","page","paginationCont","getElementById","$63b20ef733fa8c53$var$SEARCH_ACTIVE","$63b20ef733fa8c53$var$prevSearch","$63b20ef733fa8c53$var$keyMovieFetch","KeyMovieFetch","$63b20ef733fa8c53$var$onSearchSubmit","evt","preventDefault","stopPropagation","classList","remove","resetPage","value","currentTarget","elements","searchQuery","requireData","loadPage","innerHTML","fetch","fetchMovie","total_results","pagination","reset","results","CheckImgUrl","filmCheckImgUrl","$63b20ef733fa8c53$var$createMarkupKey","target","error","console","log","$63b20ef733fa8c53$var$renderGalleryKey","data","add","markup","map","poster_path","title","release_date","genre_ids","genresFool","year","formatedGenres","result","undefined","length","slice","genr","GENRES_FULL_INFO","genreIdArr","forEach","genreId","matchGenre","find","genre","push","name","genresList","join","addToHTML","on","event","currentPage","onPaginLoadMore"],"version":3,"file":"index.f7c495e9.js.map"}